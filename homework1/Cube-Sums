#lang racket
(define (cube-sums? n)
  (define (cube-of x) (* x x x))
  (define (sum-iter i j)
    (cond [(= n (+ (cube-of i) (cube-of j))) #t]
          [(and (= (round (expt n (/ 1 3))) i) (= (round (expt n (/ 1 3))) j)) #f]
          [(> (cube-of j) n) (sum-iter (+ i 1) 1)]
          [else (sum-iter i (+ j 1))])
    )
  (sum-iter 1 1))

(define (count-cube-sums from to)
  (define (iter cur count)
    (cond [(> cur to) count]
          [(cube-sums? cur) (iter (+ cur 1) (+ count 1))]
          [else (iter (+ cur 1) count)]))
  (iter from 0))
